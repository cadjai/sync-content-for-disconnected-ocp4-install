---
# tasks file for sync-content-for-disconnected-ocp4-install
- name: Import variable validate tasks
  import_tasks: validate-variables.yml

- name: Download and Install the OC Client
  block:
    - name: Download the OC Client
      shell: "wget -O /tmp/openshift-client-linux-{{ ocp_client_release }}.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_client_release }}/openshift-client-linux-{{ ocp_client_release }}.tar.gz"
      register: oc_downloaded

    - name: Install the OC Client
      #shell: "tar zxf /tmp/openshift-client-linux-{{ ocp_client_release }}.tar.gz -C /usr/local/sbin/ oc kubectl"
      command: "tar zxvf /tmp/openshift-client-linux-{{ ocp_client_release }}.tar.gz -C /usr/bin"
      become: yes
      when: oc_downloaded is defined and oc_downloaded.rc == 0
      register: oc_installed

    - name: Fix Permission for the OC client 
      command: "chmod +x /usr/bin/oc"
      become: yes
      when: oc_installed is defined and oc_installed.rc == 0
      register: oc_configured

- name: Download and Install the OCP installer 
  block:
    - name: Download installer 
      command: wget -O /tmp/openshift-install-linux-{{ ocp_client_release }}.tar.gz https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_client_release }}/openshift-install-linux-{{ ocp_client_release }}.tar.gz
      register: oc_installer_downloaded

    - name: Install the OC Installer 
      command: "tar zxf /tmp/openshift-install-linux-{{ ocp_client_release }}.tar.gz -C /usr/bin"
      become: yes
      when: oc_installer_downloaded is defined and oc_installer_downloaded.rc == 0
      register: oc_installer_installed

    - name: Fix Permission for the OC Installer 
      command: "chmod +x /usr/bin/openshift-install"
      become: yes
      when: oc_installer_installed is defined and oc_installer_installed.rc == 0
      register: oc_installer_configured

- name: Set Bash Completion for the OC Client
  shell: oc completion bash | sudo tee /etc/bash_completion.d/openshift > /dev/null

- name: Copy the CA cert or registry self signed cert from bastion to the host
  copy:
    src: "{{ mirror_registry_ca }}"
    dest: /etc/pki/ca-trust/source/anchors/registry-ca.crt
    mode: 0644
    group: root
    owner: root
  when:
    - mirror_registry_ca is defined and mirror_registry_ca | length > 0
  register: ca_copied

- name: Update Ca DB store to trust downloaded CA from above
  shell: update-ca-trust
  when:
    - ca_copied is defined 
    - not ca_copied.failed | bool
    - ca_copied.changed | bool 

- name: Get Subject CN of CA from certificate to verify that it is currently trusted by the host
  shell: openssl x509 -subject -noout -in /etc/pki/ca-trust/source/anchors/registry-ca.crt | cut -d, -f7 | cut -d= -f2 | awk '{$1=$1};1'
  register: registry_ca_subject

- name: Install required packages for  OCI container runtime
  yum:
    name: "{{ oci_packages }}"
    state: present
  failed_when:
    - packaged_installed is defined
    - packaged_installed.results is defined
    - not ('already installed' in packaged_installed.results)
    - ('No package matching ' in packaged_installed.results)
  register: packaged_installed

- name: Generate Mirror Registry PullSecret Config
  command: podman login -u {{ mirror_registry_username }} -p {{ mirror_registry_password }} --authfile {{ mirror_registry_pullsecret }} {{ mirror_registry_fqdn }}:{{ mirror_registry_port }} 
  register: local_pullsecret_generated

- name: Combine Mirror Registry Pull Secret with OCP related Registries Pull Secrets
  shell: jq -c --argjson var "$(jq .auths {{ mirror_registry_pullsecret }})" '.auths += $var' {{ ocp_registries_pullsecret }} > {{ local_secret_json }}
  when:
    - local_pullsecret_generated is defined
    - local_pullsecret_generated.rc == 0 
  register: pullsecrets_merged

- name: Get the current OC CLI Path
  command: "which oc"
  become: false
  register: oc_client_location

- name: Set OC Binary path
  set_fact:
    oc_cli: "{{ oc_client_location.stdout }}"
  when:
    - oc_client_location is defined
    - oc_client_location.stdout is defined and oc_client_location.stdout != ""

- name: Mirror Images 
  shell: "{{ oc_cli | default('oc', true) }} adm -a {{ local_secret_json }} release mirror --from=quay.io/{{ product_repo }}/{{ release_name }}:{{ ocp_release }} --to={{ local_registry_fqdn_port }}/{{ local_repository }} --to-release-image={{ local_registry_fqdn_port }}/{{ local_repository }}:{{ ocp_release }} | grep -A7 'imageContentSources:' > {{ content_source_output }}"
  register: images_mirrored

- name: List Mirrored Image Tags
  shell: curl -s -u {{ mirror_registry_username }} -p {{ mirror_registry_password }} https://{{mirror_registry_fqdn_port }}/v2/{{ local_repository }}/tags/list | jq '.tags'
  register: mirrored_image_tags

- name: Print List of tags from mirrored images
  debug:
    var: mirrored_image_tags.stdout_lines

- name: Login to the local registry
  command: podman login -u {{ mirror_registry_username }} -p {{ mirror_registry_password }} https://{{mirror_registry_fqdn_port }}
  register: registry_login

- name: Prepare Local Directories to store downloaded content
  block:
  - name: Prepare Local Directory to store download contents 
    file:
      path: "{{ local_mirrored_contents_store_dir }}"
      state: directory
      mode: '0755'
    register: content_dir_created

  - name: Prepare Local Directory to store download Images
    file:
      path: "{{ local_mirrored_contents_store_dir }}/images"
      state: directory
      mode: '0755'
    register: image_dir_created

  - name: Prepare Local Directory to store download config Files
    file:
      path: "{{ local_mirrored_contents_store_dir }}/config"
      state: directory
      mode: '0755'
    register: config_dir_created

  - name: Prepare Local Directory to store download packages
    file:
      path: "{{ local_mirrored_contents_store_dir }}/pkgs"
      state: directory
      mode: '0755'
    register: pkgs_dir_created

  - name: Prepare Local Directory to store download rpms 
    file:
      path: "{{ local_mirrored_contents_store_dir }}/rpms"
      state: directory
      mode: '0755'
    register: rpms_dir_created

  - name: Prepare Local Directory to store operator manifest 
    file:
      path: "{{ local_mirrored_contents_store_dir }}/manifest"
      state: directory
      mode: '0755'
    register: manifest_dir_created


- name: Process Mirrored Images
  when:
    - registry_login is defined and registry_login.rc == 0
    - mirrored_image_tags is defined and mirrored_image_tags.stdout_lines is defined
    - image_dir_created is defined
    - local_images_store_dir in image_dir_created.path and 'directory' in image_dir_created.state
  block:
    - name: Pull Images to be  Mirrored
      command: "podman pull {{mirror_registry_fqdn_port }}/{{ local_repository }}:{{ item }}"
      with_items:
      - "{{ image_tags.tags | list }}"
      register: mirrored_images_pulled

    - name: Print Mirrored Images output
      debug:
        var: mirrored_images_pulled

    - name: Tag Images to be Mirrored
      command: "podman tag {{mirror_registry_fqdn_port }}/{{ local_repository }}:{{ item }} {{ local_repository }}:{{ item }}"
      when:
        - mirrored_images_pulled is defined
        - mirrored_images_pulled.changed is defined and mirrored_images_pulled.changed | bool
        - mirrored_images_pulled.results is defined and mirrored_images_pulled.results | length > 0
        - "'All items completed' in mirrored_images_pulled.msg"
      with_items:
      - "{{ image_tags.tags | list }}"
      register: mirrored_images_tagged

    - name: Print Pulled Images output
      debug:
        var: mirrored_images_pulled

    - name: Save Images to be Mirrored
      shell: "podman save {{ local_repository }}:{{ item }} | gzip > {{ local_mirrored_contents_store_dir }}/images/{{ item }}.tar.gz"
      when:
        - mirrored_images_tagged is defined
        - mirrored_images_tagged.changed is defined and mirrored_images_tagged.changed | bool
        - mirrored_images_tagged.results is defined and mirrored_images_tagged.results | length > 0
        - "'All items completed' in mirrored_images_tagged.msg"
      with_items:
      - "{{ image_tags.tags | list }}"
      register: mirrored_images_saved

- name: Copy Registry artifacts to the images directory 
  block:
    - name: Copy mirror registry pull secret file to local image store  
      command: "cp {{ mirror_registry_pullsecret }} {{ local_mirrored_contents_store_dir }}/config/{{ mirror_registry_pullsecret | basename }}"
      register: mirror_registry_pullsecret_copied

    - name: Copy mirror registry Content Source output file to local image store  
      command: "cp {{ content_source_output }} {{ local_mirrored_contents_store_dir }}/config/{{ content_source_output | basename }}"
      register: mirror_registry_contentsource_copied

    - name: Copy the Install Config template to the local image store to be amended with the content source
      command: "cp ../files/install-config.yml.j2 {{ local_mirrored_contents_store_dir }}/config/install-config.yml.j2"
      register: install_config_copied

    - name: Convert Mirror Registry pull secret json into a single line json to update install-config
      shell: "cat {{ local_mirrored_contents_store_dir }}/config/{{ mirror_registry_pullsecret | basename }} | tr -d '[\r\n\t]'"
      register: pullsecret_singleline
 
    - name: Add mirror registry pull secret json into a install config 
      lineinfile:
        path: "{{ local_mirrored_contents_store_dir }}/config/install-config.yml.j2"
        regexp: "^pullSecret:"
        line: "pullSecret: {{ pullsecret_singleline.stdout }}" 
      register: mirror_registry_contentsource_copied

    - name: Append Content Source to Install Config 
      shell: " cat {{ local_mirrored_contents_store_dir }}/config/{{ content_source_output | basename }} >> {{ local_mirrored_contents_store_dir }}/images/install-config.yml.j2"
      register: content_source_appended

      - name: Copy OC client to mirror content directory
        command: cp /tmp/openshift-client-linux-{{ ocp_client_release }}.tar.gz {{ local_mirrored_contents_store_dir }}/pkgs/
        register: oc_client_copied

- name: Create iso of image content if needed
  when:
    - create_content_iso is defined
    - create_content_iso | bool 
  block:
    - name: Ensure require packages are installed
      yum:
        name: "{{ isogen_packages }}"
        state: present
      failed_when:
        - iso_packaged_installed is defined
        - iso_packaged_installed.results is defined
        - not ('already installed' in iso_packaged_installed.results)
        - "'No package matching ' in iso_packaged_installed.results"
      register: iso_packaged_installed 

    - name: Create Iso of the image content
      command: "genisoimage -output {{ local_mirrored_contents_store_dir }}/ocp4-install-content.iso -volid cidata -joliet -rock -input-charset utf-8 {{ local_mirrored_contents_store_dir }}/images "
      register: image_iso_created
