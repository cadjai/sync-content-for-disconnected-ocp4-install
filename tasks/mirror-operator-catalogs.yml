---
- name: Prepare Local Directory to store operator manifests and DB
  block:
    - name: Prepare Local Directory to store operator manifests
      file:
        path: "{{ local_mirrored_contents_store_dir }}/manifests/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ catalog_sources }}"
      register: manifest_dir_created

    - name: Prepare Local Directory to store operator manifest DBs
      file:
        path: "{{ local_mirrored_contents_store_dir }}/manifests-db/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ catalog_sources }}"
      register: manifest_db_dir_created

###Adding this as a workaround for bug https://bugzilla.redhat.com/show_bug.cgi?id=1795272
- name: Workaround for bugzilla bug # 1795272
  block:
    - name: Get User home 
      shell: "getent passwd {{ ansible_user }} | cut -d: -f6"
      changed_when: false
      register: user_home

    - name: Prepare Local Directory to store registry config 
      file:
        path: "{{ item }}/.docker"
        state: directory
        mode: '0755'
      with_items: 
        - "{{ user_home.stdout }}"
        - "{{ ansible_env.HOME }}"
      register: docker_config_dir_created

    - name: Copy Registry auth config into the .docker director
      command: cp {{ mirror_registry_pullsecret }} {{ item }}/.docker/config.json
      with_items: 
        - "{{ user_home.stdout }}"
        - "{{ ansible_env.HOME }}"
      register: docker_config_created

- name: Get the current OC CLI Path
  command: "which oc"
  become: false
  register: oc_client_location

- name: Set OC Binary path
  set_fact:
    oc_cli: "{{ oc_client_location.stdout }}"
  when:
    - oc_client_location is defined
    - oc_client_location.stdout is defined and oc_client_location.stdout != ""

- name: Mirror Catalogs
  command: "{{ oc_cli | default('oc', true) }} adm catalog build --auth-token={{ mirror_registry_pullsecret }} --appregistry-endpoint='https://quay.io/cnr' --appregistry-org={{ item }} --from='quay.io/operator-framework/operator-registry-server:latest' --to={{ mirror_registry_fqdn }}:{{ mirror_registry_port }}/{{ catalog_repository }}/{{ item }}:{{ ocp_release }} --manifest-dir={{ local_mirrored_contents_store_dir }}/manifests/{{ item }}/  --to-db={{ local_mirrored_contents_store_dir }}/manifests-db/{{ item }}/{{ catalog_db }}"
  with_items:
    - "{{ catalog_sources }}"
  register: operator_catalog_mirrored 

- name: List Mirrored Image Tags
  shell: curl -s -u {{ mirror_registry_username }}:{{ mirror_registry_password }} https://{{ mirror_registry_fqdn }}:{{ mirror_registry_port }}/v2/{{ catalog_repository }}/{{ item }}/tags/list
  with_items:
    - "{{ catalog_sources }}"
  register: mirrored_operator_image_tags

- name: Set output to a fact
  set_fact:
    opc_image_tags: "{{ mirrored_operator_image_tags.stdout }}"

- name: Login to the local registry
  command: podman login -u {{ mirror_registry_username }} -p {{ mirror_registry_password }} https://{{ mirror_registry_fqdn }}:{{ mirror_registry_port }}
  register: registry_login

- name: Prepare Local Directories to store downloaded content
  block:
  - name: Prepare Local Directory to store download contents
    file:
      path: "{{ local_mirrored_contents_store_dir }}/opc-images"
      state: directory
      mode: '0755'
    register: opc_content_dir_created

- name: Process Mirrored iCatalog Images
  when:
    - registry_login is defined and registry_login.rc == 0
    - mirrored_operator_image_tags is defined and mirrored_operator_image_tags.stdout_lines is defined
    - opc_content_dir_created is defined
    - "'opc-images' in opc_content_dir_created.path and 'directory' in opc_content_dir_created.state"
  block:
    - name: Pull Images to be  Mirrored
      command: "podman pull {{ mirror_registry_fqdn }}:{{ mirror_registry_port }}/{{ catalog_repository }}:{{ item }}"
      with_items:
      - "{{ opc_image_tags.tags | list }}"
      register: mirrored_opcimages_pulled

    - name: Print Mirrored Images output
      debug:
        var: mirrored_opcimages_pulled

    - name: Tag Images to be Mirrored
      command: "podman tag {{ mirror_registry_fqdn }}:{{ mirror_registry_port }}/{{ catalog_repository }}:{{ item }} {{ catalog_repository }}:{{ item }}"
      when:
        - mirrored_opcimages_pulled is defined
        - mirrored_opcimages_pulled.changed is defined and mirrored_opcimages_pulled.changed | bool
        - mirrored_opcimages_pulled.results is defined and mirrored_opcimages_pulled.results | length > 0
        - "'All items completed' in mirrored_opcimages_pulled.msg"
      with_items:
      - "{{ opc_image_tags.tags | list }}"
      register: mirrored_opcimages_tagged

    - name: Print Pulled Images output
      debug:
        var: mirrored_opcimages_tagged

    - name: Save Images to be Mirrored
      shell: "podman save {{ catalog_repository }}:{{ item }} | gzip > {{ local_mirrored_contents_store_dir }}/opc-images/{{ item }}.tar.gz"
      when:
        - mirrored_opcimages_tagged is defined
        - mirrored_opcimages_tagged.changed is defined and mirrored_opcimages_tagged.changed | bool
        - mirrored_opcimages_tagged.results is defined and mirrored_opcimages_tagged.results | length > 0
        - "'All items completed' in mirrored_opcimages_tagged.msg"
      with_items:
      - "{{ opc_image_tags.tags | list }}"
      register: mirrored_opcimages_saved
